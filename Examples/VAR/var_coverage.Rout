
R version 4.0.2 (2020-06-22) -- "Taking Off Again"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> source("var1_function.R")
> set.seed(101)
> library(mcmcse)
mcmcse: Monte Carlo Standard Errors for MCMC
Version 1.4-1 created on 2020-01-29.
copyright (c) 2012, James M. Flegal, University of California, Riverside
                    John Hughes, University of Colorado, Denver
                    Dootika Vats, University of Warwick
                    Ning Dai, University of Minnesota
 For citation information, type citation("mcmcse").
 Type help("mcmcse-package") to get started.

> 
> adjust_matrix <- function(mat, N, epsilon = sqrt(log(N)/dim(mat)[2]), b = 9/10)
+ {
+   mat.adj <- mat
+   adj <- epsilon*N^(-b)
+   vars <- diag(mat)
+   corr <- cov2cor(mat)
+   eig <- eigen(corr)
+   adj.eigs <- pmax(eig$values, adj)
+   mat.adj <- diag(vars^(1/2))%*% eig$vectors %*% diag(adj.eigs) %*% t(eig$vectors) %*% diag(vars^(1/2))
+   return(mat.adj)
+ }
> 
> var_coverage <- function(N = 1e3, phi, omega, B = 1000, level = .90, size = "sqroot")
+ {
+ 
+ p <- dim(phi)[1]
+ 
+ large.coverage <- matrix(0, nrow = B, ncol = 6)
+ volume <- matrix(0, nrow = B, ncol = 6)
+ bias_bm <- matrix(0, nrow = B, ncol = p^2)
+ bias_wbm <- matrix(0, nrow = B, ncol = p^2)
+ bias_lug <- matrix(0, nrow = B, ncol = p^2)
+ bias_jack1 <- matrix(0, nrow = B, ncol = p^2)
+ bias_jack2 <- matrix(0, nrow = B, ncol = p^2)
+ 
+ r.J <- 1/2
+ r.here <- 2
+ 
+ truth.var <- true.sig(p = p, omega = omega, phi = phi)$final.cov
+ 
+ for(b in 1:B)
+ {
+ if(b %% 10 ==0) print(b)
+ chain <- var1(p = p, phi = phi, nsim = N, omega = omega)
+ beta.mean <- colMeans(chain)
+ 
+ foo <- mcse.multi(chain, r = 1, size = size, blather = TRUE)
+ bn <- foo$size
+ bm <- foo$cov
+ 
+ wbm <- mcse.multi(chain, r = 2, size = size)$cov
+ lug3 <- mcse.multi(chain, r = 3, size = size)$cov
+ 
+ a <- floor(N/bn)
+ alpha.J1 <- ( a + r.J)/(a*(1 - r.J))
+ alpha.J2 <- ( log(a) + r.J)/(log(a)*(1 - r.J))
+ 
+ jack1.adj <- (alpha.J1)*bm + (1 - alpha.J1)*mcse.multi(chain, size = floor(bn/2), r = 1)$cov
+ jack2.adj <- (alpha.J2)*bm + (1 - alpha.J2)*mcse.multi(chain, size = floor(bn/2), r = 1)$cov
+ 
+ sig.eigen <- eigen(jack1.adj, only.values = TRUE)$values
+ if (min(sig.eigen) <= 0) {
+     jack1.adj <- adjust_matrix(jack1.adj, N = N)
+ }
+ 
+ sig.eigen <- eigen(jack2.adj, only.values = TRUE)$values
+ if (min(sig.eigen) <= 0) {
+     jack2.adj <- adjust_matrix(jack2.adj, N = N)
+ }
+ 
+ 
+ volume[b,1] <- det(bm)^(1/p)
+ volume[b,2] <- det(wbm)^(1/p)
+ volume[b,3] <- det(lug3)^(1/p)
+ volume[b,4] <- det(jack1.adj)^(1/p)
+ volume[b,5] <- det(jack2.adj)^(1/p)
+ volume[b,6] <- det(truth.var)^(1/p)
+ 
+ bias_bm[b,] <- as.numeric(bm - truth.var)
+ bias_wbm[b,] <- as.numeric(wbm - truth.var)
+ bias_lug[b,] <- as.numeric(lug3 - truth.var)
+ bias_jack1[b,] <- as.numeric(jack1.adj - truth.var)
+ bias_jack2[b,] <- as.numeric(jack2.adj - truth.var)
+ 
+ 
+ 
+ large.crit <- qchisq(level, df = p)/N
+ 
+ truth <- rep(0,p)
+ tester <- t(beta.mean - truth) %*% qr.solve(bm) %*% (beta.mean - truth)
+ # if(tester < crit) coverage[b,1] <- 1
+ if(tester < large.crit) large.coverage[b,1] <- 1
+ 
+ tester <- t(beta.mean - truth) %*% qr.solve(wbm) %*% (beta.mean - truth)
+ # if(tester < crit.wbm) coverage[b,2] <- 1
+ if(tester < large.crit) large.coverage[b,2] <- 1
+ 
+ tester <- t(beta.mean - truth) %*% qr.solve(lug3) %*% (beta.mean - truth)
+ # if(tester < crit.lug3) coverage[b,3] <- 1
+ if(tester < large.crit) large.coverage[b,3] <- 1
+ 
+ tester <- t(beta.mean - truth) %*% qr.solve(jack1.adj) %*% (beta.mean - truth)
+ # if(tester < crit.lug3) coverage[b,3] <- 1
+ if(tester < large.crit) large.coverage[b,4] <- 1
+ 
+ tester <- t(beta.mean - truth) %*% qr.solve(jack2.adj) %*% (beta.mean - truth)
+ # if(tester < crit.lug3) coverage[b,3] <- 1
+ if(tester < large.crit) large.coverage[b,5] <- 1
+ 
+ tester <- t(beta.mean - truth) %*% qr.solve(truth.var) %*% (beta.mean - truth)
+ # if(tester < crit.lug3) coverage[b,3] <- 1
+ if(tester < large.crit) large.coverage[b,6] <- 1
+ 
+ }
+ # colnames(coverage) <- c("BM", "WBM", "LUG3")
+ colnames(large.coverage) <- c("BM", "WBM", "LUG3", "Jack-a", "Jack-log(a)", "Truth")
+ colnames(volume) <- c("BM", "WBM", "LUG3", "Jack-a", "Jack-log(a)", "Truth")
+ return(list("large" = large.coverage, "determinant" = volume, 
+   "bias_bm" = bias_bm, "bias_wbm" = bias_wbm, "bias_lug" = bias_lug,
+   "bias_jacka" = bias_jack1, "bias_jack-loga" = bias_jack2))
+ }
> 
> 
> p <- 10
> phi <- diag(rep(.95,p))
> omega <- matrix(.9, nrow = p, ncol = p)
> diag(omega) <- 1
> omega <- omega^(abs(col(omega)-row(omega)))
> 
> B <- 1000
> var.cov5e3 <- var_coverage(N = 5e3, phi = phi, omega = omega, B = B)
[1] 10
[1] 20
[1] 30
[1] 40
[1] 50
[1] 60
[1] 70
[1] 80
[1] 90
[1] 100
[1] 110
[1] 120
[1] 130
[1] 140
[1] 150
[1] 160
[1] 170
[1] 180
[1] 190
[1] 200
[1] 210
[1] 220
[1] 230
[1] 240
[1] 250
[1] 260
[1] 270
[1] 280
[1] 290
[1] 300
[1] 310
[1] 320
[1] 330
[1] 340
[1] 350
[1] 360
[1] 370
[1] 380
[1] 390
[1] 400
[1] 410
[1] 420
[1] 430
[1] 440
[1] 450
[1] 460
[1] 470
[1] 480
[1] 490
[1] 500
[1] 510
[1] 520
[1] 530
[1] 540
[1] 550
[1] 560
[1] 570
[1] 580
[1] 590
[1] 600
[1] 610
[1] 620
[1] 630
[1] 640
[1] 650
[1] 660
[1] 670
[1] 680
[1] 690
[1] 700
[1] 710
[1] 720
[1] 730
[1] 740
[1] 750
[1] 760
[1] 770
[1] 780
[1] 790
[1] 800
[1] 810
[1] 820
[1] 830
[1] 840
[1] 850
[1] 860
[1] 870
[1] 880
[1] 890
[1] 900
[1] 910
[1] 920
[1] 930
[1] 940
[1] 950
[1] 960
[1] 970
[1] 980
[1] 990
[1] 1000
> var.cov1e4 <- var_coverage(N = 1e4, phi = phi, omega = omega, B = B)
[1] 10
[1] 20
[1] 30
[1] 40
[1] 50
[1] 60
[1] 70
[1] 80
[1] 90
[1] 100
[1] 110
[1] 120
[1] 130
[1] 140
[1] 150
[1] 160
[1] 170
[1] 180
[1] 190
[1] 200
[1] 210
[1] 220
[1] 230
[1] 240
[1] 250
[1] 260
[1] 270
[1] 280
[1] 290
[1] 300
[1] 310
[1] 320
[1] 330
[1] 340
[1] 350
[1] 360
[1] 370
[1] 380
[1] 390
[1] 400
[1] 410
[1] 420
[1] 430
[1] 440
[1] 450
[1] 460
[1] 470
[1] 480
[1] 490
[1] 500
[1] 510
[1] 520
[1] 530
[1] 540
[1] 550
[1] 560
[1] 570
[1] 580
[1] 590
[1] 600
[1] 610
[1] 620
[1] 630
[1] 640
[1] 650
[1] 660
[1] 670
[1] 680
[1] 690
[1] 700
[1] 710
[1] 720
[1] 730
[1] 740
[1] 750
[1] 760
[1] 770
[1] 780
[1] 790
[1] 800
[1] 810
[1] 820
[1] 830
[1] 840
[1] 850
[1] 860
[1] 870
[1] 880
[1] 890
[1] 900
[1] 910
[1] 920
[1] 930
[1] 940
[1] 950
[1] 960
[1] 970
[1] 980
[1] 990
[1] 1000
> var.cov5e4 <- var_coverage(N = 5e4, phi = phi, omega = omega, B = B)
[1] 10
[1] 20
[1] 30
[1] 40
[1] 50
[1] 60
[1] 70
[1] 80
[1] 90
[1] 100
[1] 110
[1] 120
[1] 130
[1] 140
[1] 150
[1] 160
[1] 170
[1] 180
[1] 190
[1] 200
[1] 210
[1] 220
[1] 230
[1] 240
[1] 250
[1] 260
[1] 270
[1] 280
[1] 290
[1] 300
[1] 310
[1] 320
[1] 330
[1] 340
[1] 350
[1] 360
[1] 370
[1] 380
[1] 390
[1] 400
[1] 410
[1] 420
[1] 430
[1] 440
[1] 450
[1] 460
[1] 470
[1] 480
[1] 490
[1] 500
[1] 510
[1] 520
[1] 530
[1] 540
[1] 550
[1] 560
[1] 570
[1] 580
[1] 590
[1] 600
[1] 610
[1] 620
[1] 630
[1] 640
[1] 650
[1] 660
[1] 670
[1] 680
[1] 690
[1] 700
[1] 710
[1] 720
[1] 730
[1] 740
[1] 750
[1] 760
[1] 770
[1] 780
[1] 790
[1] 800
[1] 810
[1] 820
[1] 830
[1] 840
[1] 850
[1] 860
[1] 870
[1] 880
[1] 890
[1] 900
[1] 910
[1] 920
[1] 930
[1] 940
[1] 950
[1] 960
[1] 970
[1] 980
[1] 990
[1] 1000
> var.cov1e5 <- var_coverage(N = 1e5, phi = phi, omega = omega, B = B)
[1] 10
[1] 20
[1] 30
[1] 40
[1] 50
[1] 60
[1] 70
[1] 80
[1] 90
[1] 100
[1] 110
[1] 120
[1] 130
[1] 140
[1] 150
[1] 160
[1] 170
[1] 180
[1] 190
[1] 200
[1] 210
[1] 220
[1] 230
[1] 240
[1] 250
[1] 260
[1] 270
[1] 280
[1] 290
[1] 300
[1] 310
[1] 320
[1] 330
[1] 340
[1] 350
[1] 360
[1] 370
[1] 380
[1] 390
[1] 400
[1] 410
[1] 420
[1] 430
[1] 440
[1] 450
[1] 460
[1] 470
[1] 480
[1] 490
[1] 500
[1] 510
[1] 520
[1] 530
[1] 540
[1] 550
[1] 560
[1] 570
[1] 580
[1] 590
[1] 600
[1] 610
[1] 620
[1] 630
[1] 640
[1] 650
[1] 660
[1] 670
[1] 680
[1] 690
[1] 700
[1] 710
[1] 720
[1] 730
[1] 740
[1] 750
[1] 760
[1] 770
[1] 780
[1] 790
[1] 800
[1] 810
[1] 820
[1] 830
[1] 840
[1] 850
[1] 860
[1] 870
[1] 880
[1] 890
[1] 900
[1] 910
[1] 920
[1] 930
[1] 940
[1] 950
[1] 960
[1] 970
[1] 980
[1] 990
[1] 1000
> # var.cov1e6 <- var_coverage(N = 1e6, phi = phi, omega = omega, B = 1000)
> 
> save(var.cov5e3, var.cov1e4, var.cov5e4, var.cov1e5,  file = "var_coverage5e345p10_sq")
> 
> 
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
712.028  16.670 740.433 
